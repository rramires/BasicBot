1 - Inicir projeto
npm init -y


2 - Instalar as dependências - Axios cliente http, Dotenv carregar as configurações
npm install axios dotenv 


3 - Criar um arquivo .env
touch .env


4 - Adicionar no .env as constantes
API_URL=https://api.binance.com/api
API_VERSION = v3
API_KEY=
SECRET_KEY=
CRAWLER_INTERVAL=2000
PROFITABILITY=1.05

// Para ver os limites, teste no browser
https://api.binance.com/api/v3/exchangeInfo


5 - Verifique se o .env e node_modules estão no 
.gitignore


6 - Crie o arquivo da app, index.js e adicione
setInterval(() => {
    console.log('Chamou a API !')
}, process.env.CRAWLER_INTERVAL)


7 - Configure o dotenv no package.json, em scripts adicione
"start": "node -r dotenv/config index",


8 - Teste
npm start

Deve imprimir no console 
"Chamou a API !"

------------------------------


9 - Crie um aquivo api.js que servirá de wrapper
// imports
const axios = require('axios')
const querystring = require('querystring')

/**
 * Metodo interno que monta e faz as chamadas
 * 
 * @param path - Consulta desejada na API
 * @param data - Dados que serão convertidos no formato querystring
 * @param method GET ou POST
 * @returns json
 */
const publicCall = async (path, data, method = 'GET') => {
    try{
        // monta a query
        const query = data ? `?${querystring.encode(data)}` : ''

        // monta a url
        const url = `${process.env.API_URL}/${process.env.API_VERSION}/${path}${query}`
        //console.log('url: ', url)

        // faz a chamada
        const result = await axios({
            method,
            url
        })
        return result.data
    }
    catch(err){
        console.log(err)
    }
}


/**
 * Metodo de teste, que retora o horario do servidor
 * 
 * @returns json
 */
const time = async () => {
    return publicCall('time')
}

// exports
module.exports = {
    time
}


10 - Modifique o index.js para chamar a API
// imports
const api = require('./api')

setInterval(async () => {
    // faz a chamada
    console.log('Chamou a API :',  await api.time())
}, process.env.CRAWLER_INTERVAL)


11 - Teste
npm start
// Deve imprimir o timestamp do servidor da Binance, ex:
Chamou a API : { serverTime: 1633299402667 }

------------------------------


12 - Teste no browser o Depht
https://api.binance.com/api/v3/depth?symbol=BTCBRL&limit=5

12 - Criando o monitoramento do mercado. Em api.js adicione depois do metodo time
/**
 * Retorna infos do book de um par de moedas (symbol)
 * 
 * @param symbol Par de moedas, ex BTCUSDT, LTCBTC, etc
 * @param limit Quantidade de ordens no book - Minimo 5
 * @returns 
 */
const depth = async (symbol = 'BTCUSDT', limit = 5) => {
    return publicCall('depth', {
        symbol, 
        limit
    })
}

// adicione no exports
module.exports = {
    time,
    depth
}


13 - Modifique a app, adicionando em index.js
setInterval(async () => {
    // faz a chamada
    // console.log('Chamou a API :',  await api.time())
    console.log('Depth :',  await api.depth())
}, process.env.CRAWLER_INTERVAL)


14 - Teste
npm start
// Deve imprimir 5 linhas do book, ex:
Depth : {
  lastUpdateId: 14067475097,
  bids: [
    [ '47969.90000000', '0.05381000' ],
    [ '47966.92000000', '0.00022000' ],
    [ '47966.53000000', '0.29880000' ],
    [ '47966.24000000', '0.80145000' ],
    [ '47965.55000000', '0.04457000' ]
  ],
  asks: [
    [ '47969.91000000', '1.02805000' ],
    [ '47969.95000000', '0.00237000' ],
    [ '47971.23000000', '0.67001000' ],
    [ '47971.24000000', '0.46064000' ],
    [ '47972.21000000', '0.02200000' ]
  ]
}


15 - Percebendo que é uma matriz, vamos filtrar
setInterval(async () => {
    // faz a chamada
    // console.log('Chamou a API :',  await api.time())
    // console.log('Depth :',  await api.depth())
    const result = await api.depth()
    console.log('Highest Buy: ',  result.bids[0][0])
    console.log('Lowest Sell: ',  result.asks[0][0])
}, process.env.CRAWLER_INTERVAL)


16 - Teste novamente
npm start
// Deve imprimir 2 linhas do book, ex:
Highest Buy:  47955.62000000
Lowest Sell:  47955.63000000

------------------------------


17 - Criar o acesso à API Testnet da Binance.
Faça login no GitHub

Vá em 
testnet.binance.vision

Clique no início da página em
Log In with GitHub

Clique em Authorize binance-exchange

Clique em Generate HMAC_SHA256 Key
Digite um nome e salve as as chaves em algum local seguro, pois senão terá que criar outras
API Key: XXXX...
Secret Key: YYYY...


18 - Adicione as chaves geradas no .env
API_KEY=XXXX...
SECRET_KEY=YYYY...

Mude a URL para testnet
API_URL=https://testnet.binance.vision/api 

Aumente o tempo para 5 segundos
CRAWLER_INTERVAL=5000

Adicione mais uma configuração para definir o symbol (par de moedas)
SYMBOL=BTCUSDT

Tudo fica assim:
API_URL=https://testnet.binance.vision/api 
API_VERSION = v3
API_KEY=XXXX...
SECRET_KEY=YYYY...
CRAWLER_INTERVAL=5000
PROFITABILITY=1.05
SYMBOL=BTCUSDT

19 - Teste novamente
npm start
// lembre-se que agora são valores fake
Highest Buy:  48780.83000000
Lowest Sell:  48783.51000000

// Obs: a API de teste forneçe uma carteira com pares e valores fake que mudam de tempo em tempo

------------------------------


20 - Pegando as informações da Exchange. Em api.js adicione o metodo
/**
 * Retorna as informações da Exchange
 * 
 * @returns json
 */
const exchangeInfo = async () => {
    return publicCall('exchangeInfo')
}

Adicione no Exports
module.exports = {
    time,
    depth,
    exchangeInfo
}


21 - Adicione na app, index.js para testar
setInterval(async () => {
    // faz a chamada
    // console.log('Chamou a API :',  await api.time())
    // console.log('Depth :',  await api.depth())
    /*
    const result = await api.depth()
    console.log('Highest Buy: ',  result.bids[0][0])
    console.log('Lowest Sell: ',  result.asks[0][0])
    */
   console.log('ExchangeInfo :',  await api.exchangeInfo())
}, process.env.CRAWLER_INTERVAL)


22 - Teste 
npm start
// Retorna um json enorme
ExchangeInfo : {
  timezone: 'UTC',
  serverTime: 1633366741436, etc...


23 - Observe nesse json, mais abaixo em "symbols" os pares que estão sendo operados(TRADING) no momento, ex:
symbol: 'BTCUSDT',
status: 'TRADING'

symbol: 'BNBUSDT',
status: 'TRADING'
etc...

// Outra informação, caso não saiba
Bids = Ordens de compra
Asks = Ordens de venda


24 - Adicione um deles ao .env No meu caso, resolvi manter BTCUSDT pois está ativo (TRADING)
SYMBOL=BTCUSDT


25 - Na app, index.js vamos pegar o symbol do .env
No início adicione
const api = require('./api')
const symbol = process.env.SYMBOL

E adicione na chamada ao depth
setInterval(async () => {
    // faz a chamada
    //console.log('Chamou a API :',  await api.time())
    //console.log('ExchangeInfo :',  await api.exchangeInfo())
    const result = await api.depth(symbol)
    console.log('Symbol: ',  symbol)
    console.log('Highest Buy: ',  result.bids[0][0])
    console.log('Lowest Sell: ',  result.asks[0][0])
}, process.env.CRAWLER_INTERVAL)


26 - Teste 
npm start
// Retorna
Symbol:  BTCUSDT
Highest Buy:  48408.46000000
Lowest Sell:  48420.23000000

------------------------------


27 - Filtro simples nos resultados. Na app, modifique para
setInterval(async () => {
    /*
    console.log('Chamou a API :',  await api.time())
    //console.log('ExchangeInfo :',  await api.exchangeInfo())
    */

    let buy = 0, sell = 0

    // faz a chamada no book
    const result = await api.depth(symbol)
    console.log('Symbol: ',  symbol)

    // filtra testando se não está vazio
    if(result.bids && result.bids.length){
        console.log('Highest Buy: ',  result.bids[0][0])
        buy = parseInt(result.bids[0][0])
    }
    if(result.asks && result.asks.length){
        console.log('Lowest Sell: ',  result.asks[0][0])
        sell = parseInt(result.asks[0][0])
    }

    // Implemente sua estratégia
    if(sell < 50000){
        console.log('Compre !!!')
    }
    else if(buy > 60000){
        console.log('Venda !!!')
    }
    else{
        console.log('Esperando o mercado sair do lugar...')
    }
}, process.env.CRAWLER_INTERVAL)

// Serve para ter uma noção do funcionamento


28 - Teste 
npm start
// Retorna algo como
Symbol:  BTCUSDT
Highest Buy:  49130.00000000
Lowest Sell:  49130.01000000
Compre !!!

------------------------------


29 - Criando uma chamada para a carteira, que deve ser "privada"
/*
Chamadas privadas requerem mais cuidado que as públicas, pois retornam dados sensíveis
Então precisam ser encriptadas
/*
Para isso vamos criar um novo método para chamadas privadas.

No início de api.js, adicione o pacote de criptografia e as infos da API do .env
const crypto = require('crypto')
const apiKey = process.env.API_KEY
const secretKey = process.env.SECRET_KEY
const apiURL = process.env.API_URL
const apiVersion = process.env.API_VERSION

Aproveite e em publicCall, substitua os process.env.XXX
const url = `${apiURL}/${apiVersion}/${path}${query}`
// teste para ver se está funcionando

Depois de publicCall, crie um novo método, para as chamadas privadas/encriptadas
/**
 * Metodo interno que monta e faz as chamadas privadas
 * 
 * @param path - Consulta desejada na API
 * @param data - Dados que serão convertidos no formato querystring
 * @param method GET ou POST
 * @returns json
 */
const privateCall = async (path, data = {}, method = 'GET') => {
    try{
        // pega o timestamp
        const timestamp = Date.now()
        // monta o hash/assinatura 
        const signature = crypto.createHmac('sha256', secretKey) // cria a assinatura
                                // incrementa os dados e o timestamp
                                .update(`${querystring.encode({...data, timestamp})}`) 
                                // define o formato de saída
                                .digest('hex')
        //console.log('Signature', signature)
        
        // gera o objeto de dados
        const newData = {...data, timestamp, signature}

        // monta a query
        const query = `?${querystring.encode(newData)}`

        // monta a url
        const url = `${apiURL}/${apiVersion}/${path}${query}`
        //console.log('url: ', url)

        // faz a chamada 
        // 'X-MBX-APIKEY', é um Header específico da Binance que tem que ter a API_KEY
        const result = await axios({
            method,
            url,
            headers: {
                'X-MBX-APIKEY': apiKey
            }
        })
        return result.data
    }
    catch(err){
        console.log(err)
    }
}


30 - Agora é possível criar um método para acessar a carteira
/**
 * Retorna as informações da Conta
 * 
 * @returns json
 */
 const accountInfo = async () => {
    return privateCall('account')
}

Não esqueça de exportar
module.exports = {
    time,
    depth,
    exchangeInfo,
    accountInfo
}


31 - Comente as outras chamadas na app, e adicione
console.log('Account Info: ',  await api.accountInfo())

Teste
npm start
// Deve retornar algo similar a
Account Info:  {
  makerCommission: 0, etc...

E o que nos interessa são os saldos:
balances: [
    { asset: 'BNB', free: '1000.00000000', locked: '0.00000000' }, etc...


32 - Filtrando
// faz a chamada na carteira
const account = await api.accountInfo()
// filtra para pegar as moedas
const coins = account.balances.filter(b => symbol.indexOf(b.asset) !== -1)
console.log('Posição da carteira: ', coins)

// Testando, deve retornar algo similar a
Posição da carteira: [
  { asset: 'BTC', free: '1.00000000', locked: '0.00000000' },
  { asset: 'USDT', free: '10000.00000000', locked: '0.00000000' }
]


33 - O código até aqui da app, index.js é:
// imports
const api = require('./api')
const symbol = process.env.SYMBOL

setInterval(async () => {
    /*
    console.log('Chamou a API :',  await api.time())
    //console.log('ExchangeInfo :',  await api.exchangeInfo())
    console.log('Account Info: ',  await api.accountInfo())
    */

    let buy = 0, sell = 0

    // faz a chamada no book
    const result = await api.depth(symbol)
    console.log('Symbol: ',  symbol)

    // filtra testando se não está vazio
    if(result.bids && result.bids.length){
        console.log('Highest Buy: ',  result.bids[0][0])
        buy = parseInt(result.bids[0][0])
    }
    if(result.asks && result.asks.length){
        console.log('Lowest Sell: ',  result.asks[0][0])
        sell = parseInt(result.asks[0][0])
    }

    // Implemente sua estratégia
    if(sell < 50000){
        console.log('Compre !!!')
    }
    else if(buy > 60000){
        console.log('Venda !!!')
    }
    else{
        console.log('Esperando o mercado sair do lugar...')
    }

    // fas a chamada na carteira
    const account = await api.accountInfo()
    // filtra para pegar as moedas
    const coins = account.balances.filter(b => symbol.indexOf(b.asset) !== -1)
    console.log('Posição da carteira: ', coins)

}, process.env.CRAWLER_INTERVAL)


34 - Testando
npm start
// Testando, deve retornar algo similar a
Symbol:  BTCUSDT
Highest Buy:  49258.87000000
Lowest Sell:  49258.88000000
Compre !!!
Posição da carteira:  [
  { asset: 'BTC', free: '1.00000000', locked: '0.00000000' },
  { asset: 'USDT', free: '10000.00000000', locked: '0.00000000' }
]

------------------------------


35 - Criando ordens. No api.js vamos adicionar mais um método
/**
 * 
 * @param symbol - Par de moedas, ex BTCUSDT
 * @param quantity - Quantidade
 * @param price - Preço
 * @param side - Qual book, BUY ou SELL
 * @param type - Tipo de ordem, LIMIT, MARKET, STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, TAKE_PROFIT_LIMIT, LIMIT_MAKER
 * @returns json
 */
const newOrder = async (symbol, quantity, price, side = 'BUY', type = 'MARKET') => {
    // monta o objeto de dados
    const data = {symbol, side, type, quantity}
    if(price){
        data.price = price
    }
    if(type === 'LIMIT'){
        data.timeInForce = 'GTC' // got til canceled - Ordem não expira
    }
    return privateCall('order', data, method = 'POST')
}

E exportar
module.exports = {
    time,
    depth,
    exchangeInfo,
    accountInfo,
    newOrder
}


36 - Agora vamos modificar a app, para validar algumas coisas e comprar
// Rode a app e verifique se o valor do IF é suficiente para comprar. ex if(sell < 51000)... tive que aumentar o valor hj.
// Depois a lógica de teste fica assim

// faz a chamada na carteira
const account = await api.accountInfo()
// filtra para pegar as moedas
const coins = account.balances.filter(b => symbol.indexOf(b.asset) !== -1)
console.log('Posição da carteira: ', coins)

// Implemente sua estratégia
if(sell < 51000){      
    // Verificando se tenho saldo 
    const saldo = parseInt(coins.find(c => c.asset === 'USDT').free)
    if(saldo > 10){
        console.log('Meu saldo é de: ', saldo)
        // Executa a ordem, comprando 0.01 BTC com USDT por exemplo
        // Não passamos p price, pois é uma ordem a mercado
        // ou seja, o menor preço no momento
        console.log('Compra: ', await api.newOrder(symbol, 0.01))
    }
    else{
        console.log('Saldo inferior a 10')
    }

}
else if(buy > 52500){
    console.log('Venda !!!')
}
else{
    console.log('Esperando o mercado sair do lugar...')
}


37 - Teste
npm start
// Se comprou deve retornar algo similar a
Compra:  {
  symbol: 'BTCUSDT',
  orderId: 1887135, etc...

// Perceba que foi completada 
status: 'FILLED'


38 - Comente a linha que executa a compra e teste novamente
//console.log('Compra: ', await api.newOrder(symbol, 0.01))

// Perceba a mudança dos saldos na carteira de USDT e BTC, ex:
// De
Posição da carteira:  [
  { asset: 'BTC', free: '1.00000000', locked: '0.00000000' },
  { asset: 'USDT', free: '10000.00000000', locked: '0.00000000' }
]
// Para
Posição da carteira:  [
  { asset: 'BTC', free: '1.01000000', locked: '0.00000000' },
  { asset: 'USDT', free: '9494.58249465', locked: '0.00000000' }
]


------------------------------


39 -




















